<?php
namespace Modulus\Bootstrap\Config;

class ApplicationConfiguration implements \Symfony\Component\Config\Definition\ConfigurationInterface
{
    public function getConfigTreeBuilder()
    {
        $treeBuilder = new \Symfony\Component\Config\Definition\Builder\TreeBuilder();
        $treeBuilder->root("config")
            ->children()
                ->arrayNode("applications")
                    ->useAttributeAsKey("key")
                    ->arrayPrototype()
                        ->children()
                            ->scalarNode("class")->defaultValue("Symfony\Component\Console\Application")->end()
                            ->scalarNode("name")->end()
                            ->arrayNode("banner")
                                ->scalarPrototype()->defaultNull()->end()
                            ->end()
                            ->scalarNode("version")->end()
                            ->arrayNode("commands")
                                ->useAttributeAsKey("name")
                                ->arrayPrototype()
                                    ->children()
                                        ->scalarNode("class")->defaultValue("Modulus\Console\BaseCommand")->end()
                                        ->scalarNode("service")->defaultValue("Modulus\Console\BaseService")->end()
                                        ->scalarNode("title")->defaultNull()->end()
                                        ->scalarNode("description")->defaultNull()->end()
                                        ->scalarNode("help")->defaultNull()->end()
                                        ->arrayNode("arguments")
                                            ->useAttributeAsKey("name")
                                            ->arrayPrototype()
                                                ->children()
                                                    ->enumNode("mode")
                                                        ->values(["required", "optional", "array"])->defaultValue("optional")
                                                    ->end()
                                                    ->scalarNode("description")->defaultValue("")->end()
                                                    ->scalarNode("default")->defaultNull()->end()
                                                ->end()
                                            ->end()
                                        ->end()
                                        ->arrayNode("options")
                                            ->useAttributeAsKey("name")
                                            ->arrayPrototype()
                                                ->children()
                                                    ->scalarNode("shortcut")->defaultNull()->end()
                                                    ->enumNode("mode")
                                                        ->values(["none", "required", "optional", "array"])->defaultValue("none")
                                                    ->end()
                                                    ->scalarNode("description")->defaultValue("")->end()
                                                    ->scalarNode("default")->defaultNull()->end()
                                                ->end()
                                            ->end()
                                        ->end()
                                    ->end()
                                ->end()
                            ->end()
                        ->end()
                    ->end()
                ->end()
                ->arrayNode("loaders")
                    ->scalarPrototype()->defaultNull()->end()
                ->end()
                ->arrayNode("autowiring")
                    ->useAttributeAsKey("namespace")
                    ->arrayPrototype()
                        ->children()
                            ->scalarNode("resource")->end()
                            ->scalarNode("excludes")->defaultNull()->end()
                        ->end()
                    ->end()
                ->end()
            ->end()
        ;

        return $treeBuilder;
    }
}